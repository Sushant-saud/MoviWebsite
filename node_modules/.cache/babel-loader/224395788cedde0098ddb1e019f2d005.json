{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sushant\\\\Desktop\\\\TechNews\\\\my-app2\\\\src\\\\Context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n//context<API>\n//useContext hooks\n//context(warehouse)\n//provider\n//consumer\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/React.createContext();\nconst API_URL = `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}`; //we need to create a provider fun\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [movie, setmovie] = useState([]);\n  const [isLoading, setisLoading] = useState(true);\n  const [Error, setError] = useState({\n    show: 'false',\n    message: \"\"\n  });\n  const [query, setquery] = useState(\"titanic\");\n\n  const getMovies = async API_URL => {\n    try {\n      const data = await fetch(API_URL);\n      const val = await data.json();\n      console.log(val);\n\n      if (val.Response === \"True\") {\n        setmovie(val.Search);\n      } else {\n        setError({\n          show: true,\n          message: val.Error\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    let timerOut = setTimeout(() => {\n      getMovies(`${API_URL}&s=${query}`);\n    }, 400);\n    return () => {\n      clearTimeout(timerOut);\n    };\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      isLoading,\n      movie,\n      Error,\n      query,\n      setquery\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n}; //global custom hook\n\n\n_s(AppProvider, \"iKUGXWsKcWb8O9ubcmYvo0+xDtM=\");\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppProvider, AppContext, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AppContext","createContext","API_URL","process","env","REACT_APP_API_KEY","AppProvider","children","movie","setmovie","isLoading","setisLoading","Error","setError","show","message","query","setquery","getMovies","data","fetch","val","json","console","log","Response","Search","err","timerOut","setTimeout","clearTimeout","useGlobalContext"],"sources":["C:/Users/Sushant/Desktop/TechNews/my-app2/src/Context.jsx"],"sourcesContent":["//context<API>\r\n//useContext hooks\r\n//context(warehouse)\r\n//provider\r\n//consumer\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nconst AppContext = React.createContext();\r\nconst API_URL = `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}`;\r\n//we need to create a provider fun\r\nconst AppProvider = ({ children }) => {\r\n    const [movie, setmovie] = useState([]);\r\n    const [isLoading, setisLoading] = useState(true);\r\n    const [Error, setError] = useState({ show: 'false', message: \"\" });\r\n    const [query,setquery]=useState(\"titanic\");\r\n    const getMovies = async (API_URL) => {\r\n        try {\r\n            const data = await fetch(API_URL);\r\n            const val = await data.json();\r\n            console.log(val);\r\n            if(val.Response === \"True\"){\r\n                setmovie(val.Search);\r\n              \r\n            }\r\n            else {\r\n                setError({\r\n                    show:true,\r\n                    message:val.Error\r\n                })\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n      let timerOut= setTimeout(() => {\r\n        getMovies(`${API_URL}&s=${query}`);\r\n        },400);\r\n        return ()=>{\r\n            clearTimeout(timerOut);\r\n        }\r\n       \r\n    }, [query])\r\n\r\n    return <AppContext.Provider value={{isLoading,movie,Error,query,setquery}}>\r\n        {children}\r\n    </AppContext.Provider>\r\n\r\n}\r\n//global custom hook\r\nconst useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n}\r\nexport { AppProvider, AppContext, useGlobalContext }\r\n\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,OAA3B;;AACA,MAAMC,UAAU,gBAAGJ,KAAK,CAACK,aAAN,EAAnB;AACA,MAAMC,OAAO,GAAI,mCAAkCC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAAjF,C,CACA;;AACA,MAAMC,WAAW,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAClC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC;IAAEgB,IAAI,EAAE,OAAR;IAAiBC,OAAO,EAAE;EAA1B,CAAD,CAAlC;EACA,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBnB,QAAQ,CAAC,SAAD,CAA/B;;EACA,MAAMoB,SAAS,GAAG,MAAOhB,OAAP,IAAmB;IACjC,IAAI;MACA,MAAMiB,IAAI,GAAG,MAAMC,KAAK,CAAClB,OAAD,CAAxB;MACA,MAAMmB,GAAG,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAlB;MACAC,OAAO,CAACC,GAAR,CAAYH,GAAZ;;MACA,IAAGA,GAAG,CAACI,QAAJ,KAAiB,MAApB,EAA2B;QACvBhB,QAAQ,CAACY,GAAG,CAACK,MAAL,CAAR;MAEH,CAHD,MAIK;QACDb,QAAQ,CAAC;UACLC,IAAI,EAAC,IADA;UAELC,OAAO,EAACM,GAAG,CAACT;QAFP,CAAD,CAAR;MAIH;IACJ,CAdD,CAcE,OAAOe,GAAP,EAAY;MACVJ,OAAO,CAACC,GAAR,CAAYG,GAAZ;IACH;EACJ,CAlBD;;EAmBA9B,SAAS,CAAC,MAAM;IACd,IAAI+B,QAAQ,GAAEC,UAAU,CAAC,MAAM;MAC7BX,SAAS,CAAE,GAAEhB,OAAQ,MAAKc,KAAM,EAAvB,CAAT;IACC,CAFqB,EAEpB,GAFoB,CAAxB;IAGE,OAAO,MAAI;MACPc,YAAY,CAACF,QAAD,CAAZ;IACH,CAFD;EAIH,CARQ,EAQN,CAACZ,KAAD,CARM,CAAT;EAUA,oBAAO,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAE;MAACN,SAAD;MAAWF,KAAX;MAAiBI,KAAjB;MAAuBI,KAAvB;MAA6BC;IAA7B,CAA5B;IAAA,UACFV;EADE;IAAA;IAAA;IAAA;EAAA,QAAP;AAIH,CAtCD,C,CAuCA;;;GAvCMD,W;;KAAAA,W;;AAwCN,MAAMyB,gBAAgB,GAAG,MAAM;EAAA;;EAC3B,OAAOhC,UAAU,CAACC,UAAD,CAAjB;AACH,CAFD;;IAAM+B,gB;;AAGN,SAASzB,WAAT,EAAsBN,UAAtB,EAAkC+B,gBAAlC"},"metadata":{},"sourceType":"module"}